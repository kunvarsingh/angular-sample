{
  "_args": [
    [
      {
        "raw": "angular2-toaster",
        "scope": null,
        "escapedName": "angular2-toaster",
        "name": "angular2-toaster",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\New folder\\Testing"
    ]
  ],
  "_from": "angular2-toaster@latest",
  "_id": "angular2-toaster@4.0.1",
  "_inCache": true,
  "_location": "/angular2-toaster",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/angular2-toaster-4.0.1.tgz_1500213537067_0.010993228759616613"
  },
  "_npmUser": {
    "name": "stabzs",
    "email": "stabzssoftware@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular2-toaster",
    "scope": null,
    "escapedName": "angular2-toaster",
    "name": "angular2-toaster",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular2-toaster/-/angular2-toaster-4.0.1.tgz",
  "_shasum": "587aef6df903cf5e2b7eba4047b54ec9a21b8e3b",
  "_shrinkwrap": null,
  "_spec": "angular2-toaster",
  "_where": "D:\\New folder\\Testing",
  "author": {
    "name": "Stabzs"
  },
  "bugs": {
    "url": "https://github.com/stabzs/Angular2-Toaster/issues"
  },
  "dependencies": {},
  "description": "An Angular Toaster Notification library based on AngularJS-Toaster",
  "devDependencies": {
    "@angular/animations": "4.1.0",
    "@angular/common": "4.1.0",
    "@angular/compiler": "4.1.0",
    "@angular/compiler-cli": "4.1.0",
    "@angular/core": "4.1.0",
    "@angular/platform-browser": "4.1.0",
    "@angular/platform-browser-dynamic": "4.1.0",
    "@angular/platform-server": "4.1.0",
    "@types/jasmine": "2.5.47",
    "@types/node": "7.0.12",
    "awesome-typescript-loader": "3.1.2",
    "codelyzer": "3.0.1",
    "core-js": "2.4.1",
    "coveralls": "2.11.14",
    "cpx": "1.5.0",
    "http-server": "0.9.0",
    "istanbul-instrumenter-loader": "1.1.0",
    "jasmine-core": "2.5.2",
    "karma": "1.5.0",
    "karma-chrome-launcher": "2.0.0",
    "karma-coverage": "1.1.1",
    "karma-jasmine": "1.0.2",
    "karma-mocha-reporter": "^2.1.0",
    "karma-remap-coverage": "~0.1.2",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "2.0.3",
    "reflect-metadata": "0.1.10",
    "remap-istanbul": "0.8.3",
    "rimraf": "2.5.4",
    "rollup": "0.41.6",
    "rxjs": "5.2.0",
    "source-map-loader": "0.2.0",
    "ts-helpers": "1.1.2",
    "tslint": "5.3.2",
    "typescript": "2.3.2",
    "typings": "2.1.0",
    "uglify-js": "2.8.18",
    "webpack": "2.3.2",
    "zone.js": "0.8.5"
  },
  "directories": {},
  "dist": {
    "shasum": "587aef6df903cf5e2b7eba4047b54ec9a21b8e3b",
    "tarball": "https://registry.npmjs.org/angular2-toaster/-/angular2-toaster-4.0.1.tgz"
  },
  "homepage": "https://github.com/stabzs/Angular2-Toaster#readme",
  "keywords": [
    "angular",
    "angular2",
    "angular4",
    "angularjs-toaster",
    "angular-toaster",
    "angular2-toaster",
    "toast",
    "toaster",
    "notification",
    "growl"
  ],
  "license": "MIT",
  "main": "bundles/angular2-toaster.umd.js",
  "maintainers": [
    {
      "name": "stabzs",
      "email": "stabzssoftware@gmail.com"
    }
  ],
  "module": "angular2-toaster.js",
  "name": "angular2-toaster",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^4.0.0",
    "@angular/compiler": "^4.0.0",
    "@angular/core": "^4.0.0",
    "rxjs": "^5.0.0-beta.11"
  },
  "readme": "# Angular2-Toaster\r\n\r\n**angular2-toaster** is an asynchronous, non-blocking, Ahead of Time Compilation-supported Angular Toaster Notification library \r\nlargely based off of [AngularJS-Toaster](https://github.com/jirikavi/AngularJS-Toaster).\r\n\r\n[![npm](https://img.shields.io/npm/v/angular2-toaster.svg?maxAge=3600)](https://www.npmjs.com/package/angular2-toaster)\r\n[![npm](https://img.shields.io/npm/dt/angular2-toaster.svg)](https://www.npmjs.com/package/angular2-toaster)\r\n[![Build Status](https://travis-ci.org/Stabzs/Angular2-Toaster.svg?branch=master)](https://travis-ci.org/Stabzs/Angular2-Toaster)\r\n[![Coverage Status](https://coveralls.io/repos/github/Stabzs/Angular2-Toaster/badge.svg?branch=master&b=4.0.0)](https://coveralls.io/github/Stabzs/Angular2-Toaster?branch=master)\r\n\r\n\r\nVersion ^4.0.0 now supports `@angular/animations`, which is a breaking change.  Please read both \r\nthe `Getting Started` and `Animations` sections before upgrading.\r\n\r\n# Demo\r\nA dynamic Angular and Typescript demo can be found at \r\n[this plunker](http://plnkr.co/edit/hkENUhos6q9fhiOHprXO?p=preview).\r\n\r\n\r\n# Getting Started\r\n\r\n## Installation:\r\n\r\n```bash\r\nnpm install angular2-toaster\r\n```\r\n\r\n## Import CSS\r\n\r\n### Copy or Link CSS\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/node_modules/angular2-toaster/toaster.css\" />\r\n```\r\n\r\n### Import CSS with Sass or Less\r\n```scss\r\n@import 'node_modules/angular2-toaster/toaster';\r\n```\r\n\r\n\r\n## Import Library\r\n\r\n### Import via SystemJS\r\nWithin the `map` property of the `systemjs.config` file, add mappings for angular, rxjs \r\n(which is a dependency), and the angular2-toaster bundled umd file:\r\n\r\n```javascript\r\nmap: {\r\n      // angular bundles\r\n      '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\r\n      // ...\r\n      // other libraries\r\n      'rxjs':  'npm:rxjs',\r\n      'angular2-toaster': 'npm:angular2-toaster/bundles/angular2-toaster.umd.js'\r\n```\r\n\r\n### Import via Webpack\r\nSimply follow the `Getting Started` instructions to import the library.\r\n\r\n\r\n\r\n## Getting Started With Default Configuration - NgModule (Recommended):\r\n```typescript\r\nimport {NgModule, Component} from '@angular/core';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToasterModule, ToasterService} from 'angular2-toaster';\r\nimport {Root} from './root.component'\r\n\r\n@NgModule({\r\n    imports: [BrowserAnimationsModule, ToasterModule],\r\n    declarations: [Root],\r\n    providers: [],\r\n    bootstrap: [Root]\r\n})\r\n\r\n@Component({\r\n    selector: 'root',\r\n    template: `\r\n            <toaster-container></toaster-container>\r\n            <button (click)=\"popToast()\">pop toast</button>`\r\n})\r\n\r\nexport class Root {\r\n    private toasterService: ToasterService;\r\n\r\n    constructor(toasterService: ToasterService) {\r\n        this.toasterService = toasterService;\r\n    }\r\n\r\n    popToast() {\r\n        this.toasterService.pop('success', 'Args Title', 'Args Body');\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Getting Started with Default Configuration - Manual Component Inclusion:\r\n\r\n```typescript\r\nimport {Component} from '@angular/core';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToasterContainerComponent, ToasterService} from 'angular2-toaster';\r\n\r\n@Component({\r\n    selector: 'root',\r\n    imports: [BrowserAnimationsModule],\r\n    directives: [ToasterContainerComponent],\r\n    providers: [ToasterService],\r\n    template: `\r\n        <toaster-container></toaster-container>\r\n        <button (click)=\"popToast()\">pop toast</button>`\r\n})\r\n\r\nclass Root {\r\n    private toasterService: ToasterService;\r\n    \r\n    constructor(toasterService: ToasterService) {\r\n        this.toasterService = toasterService;    \r\n    }\r\n    \r\n    popToast() {\r\n        this.toasterService.pop('success', 'Args Title', 'Args Body');\r\n    }\r\n}\r\n\r\nbootstrap(Root);\r\n```\r\n\r\n## Getting Started with Configuration Override:\r\n\r\n```typescript\r\nimport {Component} from '@angular/core';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToasterContainerComponent, ToasterService, ToasterConfig} from 'angular2-toaster';\r\n\r\n@Component({\r\n    selector: 'root',\r\n    imports: [BrowserAnimationsModule],\r\n    directives: [ToasterContainerComponent],\r\n    providers: [ToasterService],\r\n    template: `\r\n        <toaster-container [toasterconfig]=\"toasterconfig\">\r\n        </toaster-container>\r\n        <button (click)=\"popToast()\">pop toast</button>`\r\n})\r\n\r\nclass Root {\r\n    private toasterService: ToasterService;\r\n    \r\n    constructor(toasterService: ToasterService) {\r\n        this.toasterService = toasterService;    \r\n    }\r\n    \r\n    public toasterconfig : ToasterConfig = \r\n        new ToasterConfig({\r\n            showCloseButton: true, \r\n            tapToDismiss: false, \r\n            timeout: 0\r\n        });\r\n    \r\n    popToast() {\r\n        this.toasterService.pop('success', 'Args Title', 'Args Body');\r\n    }\r\n}\r\n\r\nbootstrap(Root);\r\n```\r\n\r\n\r\n## Asynchronous vs Synchronous ToasterService\r\n`ToasterService` exposes both a synchronous and asynchronous pop method in the form of `pop()` and \r\n`popAsync()` respectively.  \r\n\r\n`pop()` returns a concrete `Toast` instance after the toastId property has been hydrated and the \r\ntoast has been added to all receiving containers.\r\n\r\n`popAsync()` returns a hot `Observable<Toast>` that may be subscribed to to receive multiple toast \r\nupdates.\r\n\r\n\r\n## Customize Toast arguments in pop\r\n```typescript\r\n\r\nvar toast: Toast = {\r\n    type: 'success',\r\n    title: 'close button',\r\n    showCloseButton: true\r\n};\r\n\r\nthis.toasterService.pop(toast);\r\n\r\n```\r\n\r\n## Clear Existing Toast\r\n`ToasterService` exposes a `clear` function that accepts two optional parameters: `toastId` and \r\n`toastContainerId`.\r\n\r\nThese parameters can be used to clear toasts by specific id, by container id, \r\nby both, or by neither.  If both parameters are omitted, all toasts in all containers will be \r\nremoved.\r\n\r\n```typescript\r\nvar toast = this.toasterService.pop('success', 'title', 'body');\r\nthis.toasterService.clear(toast.toastId, toast.toastContainerId);\r\n```\r\n\r\n\r\n## Animations\r\nStarting with version `4.0.0` and greater, Animation configuration is required, as described in the \r\n`Getting Started` section.\r\n\r\nTo add animations: \r\n\r\n- Install the `@angular/animations` npm package via \r\n`npm install @angular/animations`.\r\n- Add the `BrowserAnimationsModule` to your root module\r\n\r\n    ```typescript\r\n    import {NgModule, Component} from '@angular/core';\r\n    import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\n    import {ToasterModule} from 'angular2-toaster';\r\n    \r\n    @NgModule({\r\n        imports: [BrowserAnimationsModule, ToasterModule],\r\n        ...\r\n    ```\r\n\r\nIf you want to avoid bringing in an additional module solely for the sake of animations, you can \r\nexplicitly configure `angular2-toaster` to ignore animations.  To do so, import the \r\n`NoopAnimationsModule` instead:\r\n\r\n```typescript\r\nimport {NoopAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {ToasterModule} from 'angular2-toaster';\r\n    \r\n@NgModule({\r\n    imports: [NoopAnimationsModule, ToasterModule],\r\n    ...\r\n```\r\n\r\nAngular Animations require [browsers](http://caniuse.com/#feat=web-animation) that support the [Web Animations Standard](https://w3c.github.io/web-animations/).\r\n\r\nIf you need to target a non-supported browser, a [polyfill](https://github.com/web-animations/web-animations-js) is required.\r\n\r\n\r\n# Configurable Options\r\n### Animations\r\nThere are five animation styles that can be applied via the toasterconfig `animation` property: \r\n'fade', 'flyLeft', 'flyRight', 'slideDown', and 'slideUp'.  Any other value will disable animations.\r\n\r\n```typescript\r\ntemplate: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\npublic toasterconfig : ToasterConfig = \r\n    new ToasterConfig({animation: 'fade'});\r\n```\r\n\r\n### Limit\r\nLimit is defaulted to null, meaning that there is no maximum number of toasts that are defined \r\nbefore the toast container begins removing toasts when a new toast is added.\r\n\r\nTo change this behavior, pass a \"limit\" option to the config:\r\n\r\n```typescript\r\ntemplate: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\npublic toasterconfig : ToasterConfig = \r\n    new ToasterConfig({limit: 5});\r\n```\r\n\r\n### Tap to Dismiss\r\nBy default, the `tapToDismiss` option is set to true, meaning that if a toast is clicked anywhere \r\non the toast body, the toast will be dismissed.  This behavior can be overriden in the config so \r\nthat if set to false, the toast will only be dismissed if the close button is defined and clicked:\r\n\r\n```typescript\r\ntemplate: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\npublic toasterconfig : ToasterConfig = \r\n    new ToasterConfig({tapToDismiss: false});\r\n```\r\n\r\n### Close Button\r\n\r\nThe Close Button's visibility can be configured at three different levels:\r\n\r\n* Globally in the config for all toast types:\r\n\r\n    ```typescript\r\n    template: \r\n        `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\n    public toasterconfig : ToasterConfig = \r\n        new ToasterConfig({showCloseButton: true});\r\n    ```\r\n\r\n* Per info-class type:\r\nBy passing the close-button configuration as an object instead of a boolean, you can specify the global behavior an info-class type should have.\r\n\r\n    ```typescript\r\n    template: \r\n        `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\n    public toasterconfig : ToasterConfig = \r\n        new ToasterConfig({\r\n            showCloseButton: { 'warning': true, 'error': false }\r\n        });\r\n    ```\r\n    \r\n    If a type is not defined and specified, the default behavior for that type is false.\r\n\r\n* Per toast constructed via Toast object creation:\r\n\r\n    ```typescript\r\n    var toast : Toast = {\r\n        type: 'error',\r\n        title: 'Title text',\r\n        body: 'Body text',\r\n        showCloseButton: true\r\n    };\r\n    \r\n    this.toasterService.pop(toast);\r\n    \r\n    ```\r\n    \r\n    This option is given the most weight and will override the global configurations for that toast.  However, it will not persist to other toasts of that type and does not alter or pollute the global configuration.\r\n\r\n\r\n### Close Html\r\n\r\nThe close button html can be overridden either globally or per toast call.\r\n\r\n - Globally:\r\n\r\n    ```typescript\r\n    template: \r\n        `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\n    public toasterconfig : ToasterConfig = \r\n        new ToasterConfig({\r\n            closeHtml: '<button>Close</button>'\r\n        });\r\n    ```\r\n\r\n - Per toast:\r\n\r\n    ```typescript\r\n    var toast : Toast = {\r\n        type: 'error',\r\n        title: 'Title text',\r\n        body: 'Body text',\r\n        showCloseButton: true,\r\n        closeHtml: '<button>Close</button>'\r\n    };\r\n    \r\n    this.toasterService.pop(toast);\r\n    ```\r\n\r\n### Newest Toasts on Top\r\nThe `newestOnTop` option is defaulted to true, adding new toasts on top of other existing toasts. \r\nIf changed to false via the config, toasts will be added to the bottom of other existing toasts.\r\n\r\n```typescript\r\ntemplate: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\npublic toasterconfig : ToasterConfig = \r\n    new ToasterConfig({newestOnTop: false});\r\n```\r\n\r\n### Timeout\r\nBy default, toasts have a timeout setting of 5000, meaning that they are removed after 5000 \r\nmilliseconds.  \r\n\r\nIf the timeout is set to anything other than a number greater than 0, the toast will be considered\r\n \"sticky\" and will not automatically dismiss.\r\n\r\nThe timeout can be configured at three different levels:\r\n\r\n* Globally in the config for all toast types:\r\n  ```typescript\r\n  template: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\n  public toasterconfig : ToasterConfig = \r\n        new ToasterConfig({timeout: 2000});\r\n  ```\r\n\r\n* Per info-class type:\r\nBy passing the timeout config option as an object instead of a number, you can specify the global \r\nbehavior an info-class type should have.\r\n\r\n  ```\r\n  template: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\n  public toasterconfig : ToasterConfig = \r\n      new ToasterConfig({timeout: {error:1000});\r\n  ```\r\nIf a type is not defined and specified, a timeout will not be applied, making the toast \"sticky\".\r\n\r\n* Per toast constructed via toaster.pop('success', \"title\", \"text\"):\r\n  ```typescript\r\n  var toast : Toast = {\r\n      type: 'error',\r\n      title: 'Title text',\r\n      body: 'Body text',\r\n      showCloseButton: true,\r\n      closeHtml: '<button>Close</button>'\r\n  };\r\n        \r\n  this.toasterService.pop(toast);\r\n  ```\r\n\r\n### Prevent Timeout on Mouseover\r\nBy default, all toasts are dismissed when their timer expires, even if you mouse over the toast.  \r\nThis can be overriden via the container's config.\r\n\r\n```typescript\r\ntemplate: \r\n    `<toaster-container [toasterconfig]=\"toasterconfig\"></toaster-container>`\r\n\r\npublic toasterconfig : ToasterConfig = \r\n    new ToasterConfig({mouseoverTimerStop: false});\r\n```\r\n\r\n\r\n### Body Output Type\r\nThere are three different types of body renderings that can be passed via the \r\n`toast.bodyOutputType` argument: 'Default', 'TrustedHtml', and 'Component'. If a `bodyOutputType` \r\nis not provided, it will be defaulted to 'Default'.\r\n\r\n* Default: The `body` argument will be directly interpolated as text content.  If html is passed \r\n in the `body` argument, it will be encoded and rendered as text.\r\n \r\n* TrustedHtml: The `body` argument will be parsed and rendered as html content.\r\n  ```typescript\r\n  import {BodyOutputType} from 'angular2-toaster';\r\n  var toast : Toast = {\r\n      type: 'error',\r\n      title: 'Title text',\r\n      body: '<h4>Body text</h4>',\r\n      bodyOutputType: BodyOutputType.TrustedHtml\r\n  };\r\n            \r\n  this.toasterService.pop(toast);\r\n  ```\r\n\r\n* Component: The `body` argument is the name of the component class to be rendered as the content \r\nof the toast.\r\n  ```typescript\r\n  import {BodyOutputType} from 'angular2-toaster';\r\n  \r\n  @Component({\r\n    selector: 'dynamic-component',\r\n    template: `<div>loaded via component</div>`\r\n  })\r\n  class DynamicComponent { }\r\n  \r\n  var toast : Toast = {\r\n      type: 'error',\r\n      title: 'Title text',\r\n      body: DynamicComponent,\r\n      bodyOutputType: BodyOutputType.Component\r\n  };\r\n            \r\n  this.toasterService.pop(toast);\r\n  ```\r\n\r\n  The Component BodyOutputType offers the additional flexibilty of attaching the toast instance to \r\n  your component.  It is recommended that you expose a public property on your component for type \r\n  safe access to the toast instance if you need to consume it inside of your component.  \r\n  Mutation of the toast instance is not recommended.\r\n\r\n\r\n### On Show Callback\r\nAn onShow callback function can be attached to each toast instance.  The callback will be invoked upon toast add.\r\n\r\n```typescript\r\nvar toast: Toast = {\r\n  type: 'success',\r\n  title: 'parent',\r\n  onShowCallback: (toast) => this.toasterService.pop('success', 'invoked from ' + toast.title + ' onShow callback')  \r\n};\r\n\r\nthis.toasterService.pop(toast);\r\n```\r\n\r\n### On Hide Callback\r\nAn onHide callback function can be attached to each toast instance.  The callback will be invoked upon toast removal.\r\n\r\n```typescript\r\nvar toast: Toast = {\r\n  type: 'success',\r\n  title: 'parent',\r\n  onHideCallback: (toast) => this.toasterService.pop('success', 'invoked from ' + toast.title + ' onHide callback')  \r\n};\r\n\r\nthis.toasterService.pop(toast);\r\n```\r\n\r\n\r\n# Building the Source\r\nIn order to build Angular2-Toaster for development, you will need to have Git and Node.js installed.\r\n\r\nClone a copy of the repo:\r\n\r\n```bash\r\ngit clone https://github.com/stabzs/Angular2-Toaster.git\r\n```\r\n\r\nIn the cloned directory, run:\r\n```bash\r\nnpm install\r\n```\r\n\r\nRun Angular AoT compiler:\r\n```bash\r\nnpm run build\r\n```\r\n\r\nRun Karma test instance with coverage report:\r\n```bash\r\nnpm run test\r\n```\r\n\r\n\r\n## Author\r\n[Stabzs](stabzssoftware@gmail.com)\r\n\r\n## Credits\r\nRewritten from https://github.com/jirikavi/AngularJS-Toaster\r\n\r\nInspired by http://codeseven.github.io/toastr/demo.html.\r\n\r\n## Copyright\r\nCopyright © 2016-2017 Stabzs.\r\n\r\n\r\n## Licence\r\n\r\nThis project is licensed under the MIT license. See the [LICENSE](LICENSE) file for more info.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stabzs/Angular2-Toaster.git"
  },
  "scripts": {
    "build": "ngc -p ./tsconfig-aot.json && npm run rollup",
    "copy": "cpx package.json dist && cpx LICENSE dist && cpx README.md dist && cpx ./src/toaster.css dist",
    "lint": "tslint -c tslint.json 'src/**/*.ts'",
    "prebuild": "rimraf ./dist && npm run lint",
    "rollup": "rollup -c ./config/rollup.config.js && npm run uglify",
    "start": "npm run test && http-server -c-1 -o -p 8875 .",
    "test": "karma start karma.conf.js",
    "uglify": "uglifyjs ./dist/bundles/angular2-toaster.umd.js -o ./dist/bundles/angular2-toaster.umd.min.js && npm run copy"
  },
  "typings": "angular2-toaster.d.ts",
  "version": "4.0.1"
}
